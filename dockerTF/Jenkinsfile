pipeline {
    agent any

    environment {
        TF_VAR_container_name = "nginx-server"
        TF_DIR = "dockerTF/terraform"
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Clonando repositorio...'
                checkout scm
            }
        }

/*         stage('Install Terraform') {
            steps {
                script {
                    def terraformVersion = '1.3.1' ## you can define whatever req version you need
                    sh "wget https://releases.hashicorp.com/terraform/${terraformVersion}/terraform_${terraformVersion}_linux_amd64.zip"
                    sh "unzip -o terraform_${terraformVersion}_linux_amd64.zip"
                    sh 'chmod +x terraform'
                    sh 'mv terraform /usr/local/bin/terraform'
                    sh 'terraform version'
                }
            }
        } */

        stage('Terraform Init') {
            steps {
                dir("${env.TF_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${env.TF_DIR}") {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${env.TF_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Verificar Contenedor') {
            steps {
                sh 'docker ps | grep nginx || echo "Contenedor NGINX no iniciado"'
            }
        }
    }


    post {
        success {
            echo 'Despliegue exitoso.'
        }
        failure {
            echo 'Error en el pipeline.'
        }
        always {
        cleanWs()
         }
    }
}
